{"version":3,"sources":["getWeb3.js","components/Title/Title.js","components/UserDisplay/UserDisplay.js","components/StateDisplay/StateDisplay.js","components/DisplayVoters/DisplayVoter.js","components/Content/ProposalsRegistration/DisplayProposals/DisplayProposals.js","components/Content/ProposalsRegistration/AddProposal/AddProposal.js","components/Content/ProposalsRegistration/ProposalsRegistration.js","components/Content/RegisteringVoters/RegisteringVoters.js","components/Content/Tallied/Tallied.js","components/Content/VotingSession/Vote.js","components/Content/Content.js","components/Owner/AddVoter/AddVoter.js","components/Owner/ChangeStatus/ChangeStatus.js","components/Owner/Owner.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","on","location","reload","console","log","provider","providers","HttpProvider","Title","id","UserDisplay","props","context","useContext","ContractContext","owner","useState","usedAccount","setUsedAccount","registered","setRegistered","getAccount","ContractVar","accounts","account","contract","methods","getVoter","call","from","tmp","isRegistered","useEffect","src","StateDisplay","status","setStatus","getStatus","value","style","width","DisplayVoter","voters","setVoters","oneVoter","setOneVoter","bool","setBool","copied","state","setState","input","setInput","forEach","element","key","push","className","returnValues","voterAddress","slice","text","onCopy","onClick","getOneVoter","voter","onChange","e","inputChanged","target","type","placeholder","hasVoted","votedProposalId","DisplayProposals","Set","getProposals","size","i","getOneProposal","proposalId","proposal","previousState","length","Array","map","description","voteCount","AddProposal","addProposal","send","ProposalsRegistration","RegisteringVoters","Tallied","winner","setWinner","winningProposalID","winningProposal","Vote","setVote","Content","proposals","setProposals","options","fromBlock","toBlock","getPastEvents","listProposals","events","ProposalRegistered","event","changed","str","Voted","AddVoter","addVoter","ChangeStatus","parseInt","number","setNumber","handleChange","startProposalsRegistering","then","endProposalsRegistering","startVotingSession","endVotingSession","tallyVotes","Owner","createContext","App","storageValue","setContractVar","setOwner","getContractVar","eth","getAccounts","net","getId","networkId","deployedNetwork","VotingContract","networks","instance","Contract","abi","address","workflowStatus","currentStatut","WorkflowStatusChange","VoterRegistered","listAddress","alert","error","Provider","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.487bd7ce.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n          window.ethereum.on('chainChanged', () => {\n            window.location.reload();\n          })\n          window.ethereum.on('accountsChanged', () => {\n            window.location.reload();\n          })\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React from 'react'\nimport \"./Title.css\";\nexport default function Title() {\n  return (\n    <div id=\"title\">\n        <h1>Voting</h1>\n    </div>\n  )\n}\n","import React, {useState, useEffect, useContext} from 'react'\nimport { ContractContext } from '../../App'\nimport \"./UserDisplay.css\";\nexport default function UserDisplay(props) {\n    const context = useContext(ContractContext);\n    const owner = context.owner;\n    const [usedAccount, setUsedAccount] = useState();\n    const [registered, setRegistered] = useState(false);\n    const getAccount = async ()=>{\n        const account = await context.ContractVar.accounts;\n        try {\n            const tmp = await context.ContractVar.contract.methods.getVoter(account[0]).call({from:account[0]});\n            setRegistered(tmp.isRegistered);\n        } catch (error) {\n            \n        } \n        setUsedAccount(account[0]);\n    }\n    useEffect(() => {\n        getAccount();\n    }, [])\n\n    useEffect(() => {\n    getAccount();\n    }, [props])\n    \n  return (\n    <div id=\"userDisplay\">\n        <div id=\"infos\">\n            <p>{usedAccount}</p>\n            <div id=\"span\"><img id=\"spot\" src={registered ? \"valid.png\" : \"failed.png\"}/>{owner == usedAccount ? <img id='spot' src='roi.png' /> : \"\"}<p>{registered ? \"registered\" : \"Anon\"}</p></div>\n        </div>\n        {/* <img id=\"pp\" src={usedAccount == owner ? \"king.png\" : \"prince.png\"}></img> */}\n    </div>\n  )\n}\n","import React, {useState, useEffect} from 'react'\nimport \"./stateDisplay.css\"\nexport default function StateDisplay(props) {\n    const [status, setStatus] = useState();\n    const getStatus = (props) => {\n        switch (props.value) {\n            case '0' : setStatus(\"Registering voters\")     \n                break;\n            case '1' : setStatus(\"Proposals registration\")     \n                break;\n            case '2' : setStatus(\"Proposals registration ended\")     \n                break;\n            case '3' : setStatus(\"Voting session\")     \n                break;\n            case '4' : setStatus(\"Voting session ended\")     \n                break;\n            case '5' : setStatus(\"Votes tallied\")     \n                break;\n        \n            default: setStatus(\"error\")\n                break;\n        }\n    }\n\n    useEffect(() => {\n      getStatus(props);\n    }, [])\n    useEffect(() => {\n        getStatus(props);\n    }, [props])\n    \n  return (\n    <div id=\"StateDisplay\">\n        {status}\n        <div id=\"Progress-bar\">\n            <div style={{width: props.value * 20 + '%'}} id=\"remplissage\">\n\n            </div>\n        </div>\n    </div>\n  )\n}\n","import React, {useState, useEffect, useContext} from 'react'\nimport \"./DisplayVoters.css\";\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\nimport { ContractContext } from '../../App';\nexport default function DisplayVoter(props) {\n  console.log(props)\n  const context = useContext(ContractContext);\n  const [voters, setVoters] = useState([]);\n  const [oneVoter, setOneVoter] = useState();\n  const [bool, setBool] = useState(false);\n  const [state, setState] = useState({\n    value: '',\n    copied: false,\n  })\n  const [input, setInput] = useState();\n  useEffect(() => {\n    let tmp = [];\n    props.value.forEach((element, key) => {\n      tmp.push(<div key={key} className='voter'>{element.returnValues.voterAddress.slice(0,20)}...\n       <CopyToClipboard text={element.returnValues.voterAddress}\n      onCopy={() => setState({copied: true})}>\n        <img \n      onClick={() => {}} \n      id='spot-copy'\n      src={state.copied == true ? 'link-valid.png' : 'link.png'}/>\n      </CopyToClipboard> </div>)\n    });\n    setVoters(tmp);\n  }, [])\n  \n  //Get One\n  const inputChanged = (e) => {\n    setInput(e);\n}\n\nconst getOneVoter = async () => {\n    const voter = await context.ContractVar.contract.methods.getVoter(input).call({from:context.ContractVar.accounts[0]});\n  setOneVoter(voter);\n  setBool(true);\n}\nconsole.log(oneVoter);\n  if(context.status >= 3){\n    return (\n    <div id=\"displayVoters\">\n      <p>Registered voters : </p>\n      {voters}\n  \n    <p>Search</p>\n    <input onChange={e => {inputChanged(e.target.value)}} type=\"text\" id=\"search-input\" placeholder='Voter address'/>\n    <button onClick={getOneVoter}id=\"btn-search\">\n      Search\n    </button>\n    { bool ?\n    <div id=\"displayOne\">\n    <p id=\"vot-text\">{oneVoter.hasVoted}</p>\n        <div id=\"vot-ctn\">\n        <p id=\"vot-id\">Registered : {oneVoter.isRegistered == true ? <p className='green'>yes</p>: \"no\" }</p>\n        <p id=\"vot-vote\">Voted for : {oneVoter.votedProposalId}\"</p>\n        </div>\n    </div>\n    : \"\"\n    }\n    </div>\n  )\n  }\n  else{\n    return(\n      <div id=\"displayVoters\">\n      <p>Registered voters : </p>\n      {voters}\n      </div>\n    )\n  }\n}\n","import React, {useContext, useState, useEffect} from 'react'\nimport { ContractContext } from '../../../../App';\nimport \"./DisplayProposals.css\";\nexport default function DisplayProposals(props) {\n  const context = useContext(ContractContext);\n  const [state, setState] = useState(new Set());\n  \n  useEffect(() => {\n    getProposals();\n  }, [props])\n  \n  const getProposals = async () => {\n    if(state.size > 0){\n      setState(new Set())\n    }\n    for (let i = 0; i < props.value.length; i++) {\n      const proposal = await context.ContractVar.contract.methods.getOneProposal(props.value[i].returnValues.proposalId).call({from:context.ContractVar.accounts[0]});\n      setState(previousState => new Set([...previousState, proposal]))\n    }\n  }\n  return (\n    <div id='displayProposals'>{Array.from(state).map((element, key) => (\n      <div key={key} className=\"proposal\">\n        <p id=\"prop-text\">{element.description}</p>\n        <div id=\"prop-ctn\">\n        <p id=\"prop-id\">Id : {key}</p>\n        <p id=\"prop-vote\">Vote count {element.voteCount}</p>\n        </div>\n      </div>\n    ))}</div>\n  )\n}","import React, {useContext, useState, useEffect} from 'react';\nimport { ContractContext } from '../../../../App';\nimport \"./AddProposal.css\";\nexport default function AddProposal() {\n    const context = useContext(ContractContext);\n    const [input, setInput] = useState();\n    const [registered, setRegistered] = useState(false);\n    const getAccount = async ()=>{\n        const account = await context.ContractVar.accounts;\n        try {\n            const tmp = await context.ContractVar.contract.methods.getVoter(account[0]).call({from:account[0]});\n            setRegistered(tmp.isRegistered);\n        } catch (error) {\n            \n        } \n    }\n    useEffect(() => {\n        getAccount();\n    }, [])\n\n    const inputChanged = (e) => {\n        setInput(e);\n    }\n\n    const addProposal = async () => {\n        await context.ContractVar.contract.methods.addProposal(input).send({from:context.ContractVar.accounts[0]});\n    }\n    if(registered){\n      return (\n        <form id=\"addProposal\">\n          <p>Let's propose something...</p>\n            <input onChange={e => {inputChanged(e.target.value)}} type=\"text\" placeholder='Proposal'/>\n            <button onClick={addProposal} type=\"submit\">Add</button>\n        </form>\n      )\n    }\n    else{\n      return(<></>)\n    }\n  \n}\n","import React from 'react'\nimport AddProposal from './AddProposal/AddProposal';\nimport DisplayProposals from './DisplayProposals/DisplayProposals';\nimport \"./ProposalsRegistration.css\";\nexport default function ProposalsRegistration(props) {\n  return (\n    <div id=\"proposalsRegistration\">\n        <DisplayProposals value={props.value}/>\n        <AddProposal />\n    </div>\n  )\n}\n","import React from 'react'\nimport \"./RegisteringVoters.css\";\nexport default function RegisteringVoters() {\n  return (\n    <div id=\"registeringVoters\">Admin is registering voters...</div>\n  )\n}\n","import React, {useContext, useState, useEffect} from 'react'\nimport { ContractContext } from '../../../App';\nimport \"./Tallied.css\";\nexport default function Tallied() {\n    const context = useContext(ContractContext);\n    const [winner, setWinner] = useState();\n    const [proposal, setProposal] = useState();\n    useEffect(async () => {\n        const winningProposal = await context.ContractVar.contract.methods.winningProposalID().call({from:context.ContractVar.accounts[0]});\n        setWinner(winningProposal);\n    }, []);\n    \n  return (\n    <div id=\"winning\">Winning proposal id : {winner}</div>\n  )\n}\n","import React, {useContext, useState, useEffect} from 'react';\nimport { ContractContext } from '../../../App';\nimport \"./Vote.css\";\nexport default function Vote() {\n  const context = useContext(ContractContext);\n  const [input, setInput] = useState();\n  const [registered, setRegistered] = useState(false);\n  const getAccount = async ()=>{\n      const account = await context.ContractVar.accounts;\n      try {\n          const tmp = await context.ContractVar.contract.methods.getVoter(account[0]).call({from:account[0]});\n          setRegistered(tmp.isRegistered);\n      } catch (error) {\n          \n      } \n  }\n  useEffect(() => {\n    getAccount();\n  }, [])\n    const inputChanged = (e) => {\n        setInput(e);\n    }\n\n    const Vote = async () => {\n        await context.ContractVar.contract.methods.setVote(input).send({from:context.ContractVar.accounts[0]});\n    }\n    if(registered){\n  return (\n    <form id=\"vote\">\n        <input onChange={e => {inputChanged(e.target.value)}} type=\"text\" placeholder='Proposal id'/>\n        <button onClick={Vote} type=\"submit\">Vote</button>\n    </form>\n  )\n    }else{\n      return(<></>)\n    }\n}\n","import React, {useContext, useState, useEffect} from 'react'\nimport { ContractContext } from '../../App';\nimport \"./Content.css\";\nimport DisplayProposals from './ProposalsRegistration/DisplayProposals/DisplayProposals';\nimport ProposalsRegistration from './ProposalsRegistration/ProposalsRegistration';\nimport RegisteringVoters from './RegisteringVoters/RegisteringVoters';\nimport Tallied from './Tallied/Tallied';\nimport Vote from './VotingSession/Vote';\nexport default function Content(props) {\n  const context = useContext(ContractContext);\n  const [proposals, setProposals] = useState([]);\n  \n  useEffect(() => {\n    getProposals();\n  }, [])\n  \n  const getProposals = async () => {\n    let options = {\n      fromBlock: 0,                  //Number || \"earliest\" || \"pending\" || \"latest\"\n      toBlock: 'latest'\n    };\n    const listProposals = await context.ContractVar.contract.getPastEvents('ProposalRegistered', options);\n    setProposals(listProposals);\n    console.log('liste de proposition dans Content getProposal : ' + listProposals)\n    await context.ContractVar.contract.events.ProposalRegistered()\n          .on('data', event => {\n            getProposals();\n          })\n          .on('changed', changed => console.log(changed))\n          // .on('error', err => throw err)\n          .on('connected', str => console.log(str))\n\n    await context.ContractVar.contract.events.Voted()\n          .on('data', event => {\n            window.location.reload();\n          })\n          .on('changed', changed => console.log(changed))\n          // .on('error', err => throw err)\n          .on('connected', str => console.log(str))\n  }\n  switch (props.value) {\n    case '0' : return(<div id=\"content\"><RegisteringVoters /></div>)     \n        break;\n    case '1' : return(<div id=\"content\"><ProposalsRegistration value={proposals}/></div>)     \n        break;\n    case '2' : return(<div id=\"content\"><DisplayProposals value={proposals} /></div>)     \n        break;\n    case '3' : return(<div id=\"content-voting\"><DisplayProposals value={proposals} /><Vote /></div>)     \n        break;\n    case '4' : return(<div id=\"content\"><DisplayProposals value={proposals}/></div>)     \n        break;\n    case '5' : return(<div id=\"content-voting\"><DisplayProposals value={proposals}/><Tallied /></div>)     \n        break;\n\n    default: return(\"error\")\n        break;\n}\n}\n","import React, {useState, useContext} from 'react'\nimport { ContractContext } from '../../../App';\nimport \"./AddVoter.css\";\nexport default function AddVoter() {\n    const context = useContext(ContractContext);\n    const [input, setInput] = useState();\n\n    const inputChanged = (e) => {\n        setInput(e);\n    }\n\n    const addVoter = async () => {\n        await context.ContractVar.contract.methods.addVoter(input).send({from:context.ContractVar.accounts[0]});\n    }\n  return (\n    <form id=\"addVoter\">\n        <input onChange={e => {inputChanged(e.target.value)}} type=\"text\" placeholder='Voter address'/>\n        <button id=\"btn-add\" onClick={addVoter} type=\"submit\">Add</button>\n    </form>\n  )\n}\n","import React, {useState, useContext, useEffect} from 'react'\nimport { ContractContext } from '../../../App';\nimport \"./ChangeStatus.css\";\nexport default function ChangeStatus() {\n    const context = useContext(ContractContext);\n    const [number, setNumber] = useState(parseInt(context.status));\n\n    const increment = () => {\n        setNumber(number + 1);\n    }\n    \n    const handleChange = async () => {\n        switch (number) {\n            case 0 : console.log('status = 0')     \n                break;\n            case 1 : await context.ContractVar.contract.methods.startProposalsRegistering().send({from:context.ContractVar.accounts[0]}).then(console.log);     \n                break;\n            case 2 : await context.ContractVar.contract.methods.endProposalsRegistering().send({from:context.ContractVar.accounts[0]});      \n                break;\n            case 3 : await context.ContractVar.contract.methods.startVotingSession().send({from:context.ContractVar.accounts[0]});\n            console.log('phase3')    \n                break;\n            case 4 : await context.ContractVar.contract.methods.endVotingSession().send({from:context.ContractVar.accounts[0]});      \n                break;\n            case 5 : await context.ContractVar.contract.methods.tallyVotes().send({from:context.ContractVar.accounts[0]});      \n                break;\n        \n            default: console.log('Voting contract is over');\n                break;\n        }\n    }\n    useEffect(() => {\n        if(number != context.status){\n            handleChange();\n        }  \n    }, [number])\n    console.log(number);\n  return (\n    <div id=\"changeStatus\">\n\n        { number < 5 ? <button onClick={increment}>{number == 4 ? \"Tally votes\" : \"Next Phase\"}</button> : \"\"}\n    </div>\n  )\n}\n","import React, {useContext} from 'react'\nimport { ContractContext } from '../../App';\nimport AddVoter from './AddVoter/AddVoter';\nimport ChangeStatus from './ChangeStatus/ChangeStatus';\nimport \"./Owner.css\";\nexport default function Owner() {\n  const context = useContext(ContractContext);\n  return (\n    <div id=\"owner\">\n      <p>Owner settingss</p> \n      {context.status < 1 ? <AddVoter /> : \"\"}\n      <ChangeStatus />\n    </div>\n  )\n}\n","import React, { useState, useEffect } from \"react\";\nimport VotingContract from \"./contracts/Voting.json\";\nimport { createContext } from \"react\";\nimport getWeb3 from \"./getWeb3\";\nimport \"./App.css\";\nimport Title from \"./components/Title/Title\";\nimport UserDisplay from \"./components/UserDisplay/UserDisplay\";\nimport StateDisplay from \"./components/StateDisplay/StateDisplay\";\nimport DisplayVoters from \"./components/DisplayVoters/DisplayVoter\";\nimport Content from \"./components/Content/Content\";\nimport Owner from \"./components/Owner/Owner\";\nexport const ContractContext = createContext();\n\nconst App = () => {\n\n  const [ContractVar, setContractVar] = useState({\n    storageValue: [],\n    web3: null,\n    accounts: null,\n    contract: null\n  });\n\n  const [owner, setOwner] = useState();\n  const [status, setStatus] = useState(0);\n  const [bool, setBool] = useState(false);\n  const [voters, setVoters] = useState([]);\n  useEffect(() => {\n    getContractVar();\n  }, []);\n\n  const getContractVar = async () => {\n\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = VotingContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        VotingContract.abi,\n        deployedNetwork && deployedNetwork.address,\n        );\n        const Owner = await instance.methods.owner().call();\n        setOwner(Owner);\n        // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n        const currentStatut = await instance.methods.workflowStatus().call();\n        setStatus(currentStatut);\n        //event status listener\n        await instance.events.WorkflowStatusChange()\n          .on('data', event => {\n            setStatus(event.returnValues[1]);\n          })\n          .on('changed', changed => console.log(changed))\n          // .on('error', err => throw err)\n          .on('connected', str => console.log(str))\n\n        await instance.events.VoterRegistered()\n          .on('data',async event => {\n            if(event.returnValues.voterAddress == accounts[0]){\n              setBool(true);\n            };\n            window.location.reload();\n          })\n          .on('changed', changed => console.log(changed))\n          // .on('error', err => throw err)\n          .on('connected', str => console.log(str))\n\n          let options = {\n            fromBlock: 0,                  //Number || \"earliest\" || \"pending\" || \"latest\"\n            toBlock: 'latest'\n          };\n          const listAddress = await instance.getPastEvents('VoterRegistered', options);\n          setVoters(listAddress);\n\n        setContractVar({web3, accounts, contract: instance });\n\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\n          `Failed to load web3, accounts, or contract. Check console for details.`,\n        );\n        console.error(error);\n      }\n  };\n  \n  if(ContractVar.web3){\n    return (\n      \n      <div className=\"body-container\">\n        <ContractContext.Provider value={{ ContractVar, setContractVar, owner, status }}>\n        <div id=\"upPart\">\n          <Title />\n          <StateDisplay value={status}/>\n          <UserDisplay value={bool} />\n        </div>\n        <div id=\"downPart\">\n          <div id=\"left\">\n            <DisplayVoters value={voters} />\n          </div>\n          <Content value={status}/>\n        {owner == ContractVar.accounts[0] ? <Owner /> : \"\"}\n        </div>\n      </ContractContext.Provider>\n      </div>\n    );\n  }\n  else{\n    return (<>Loading Web3...</>)\n  }\n  \n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}